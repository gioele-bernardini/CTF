#!/usr/bin/env python3

import string

# Stack dump as a tuple of values
dump = (
  0x402118, None, 0x72f5c89dca00, None, 0x1ac6880, 0xa347834,
  0x7ffc9458b1e0, 0x72f5c87cde60, 0x72f5c89f24d0, 0x1,
  0x7ffc9458b2b0, None, None, 0x7b4654436f636970,
  0x355f31346d316e34, 0x3478345f33317937, 0x35625f673431665f,
  0x7d663839623764, 0x7, 0x72f5c89f48d8, 0x2300000007,
  0x206e693374307250, 0xa336c797453, 0x9, 0x72f5c8a05de9,
  0x72f5c87d6098, 0x72f5c89f24d0, None, 0x7ffc9458b2c0,
  0x70252c70252c7025,
)

def hex_to_string(hex_value):
  """
  Converts a hexadecimal value to a readable string, considering little-endian byte order.

  Args:
    hex_value (int): The hexadecimal value to convert.

  Returns:
    str or None: The decoded string if successful, otherwise None.
  """
  try:
    # Convert the hexadecimal value to a hexadecimal string without '0x' prefix
    hex_str = format(hex_value, 'x')

    # Ensure the hexadecimal string has an even number of digits
    if len(hex_str) % 2 != 0:
      hex_str = '0' + hex_str

    # Convert the hexadecimal string to bytes
    bytes_obj = bytes.fromhex(hex_str)

    # Reverse the byte order to account for little-endian
    reversed_bytes = bytes_obj[::-1]

    # Decode the reversed bytes to a UTF-8 string, replacing invalid characters
    decoded_str = reversed_bytes.decode('utf-8', errors='replace')

    # Optional: Keep only printable characters for cleaner output
    printable_str = ''.join(filter(lambda x: x in string.printable, decoded_str))

    return printable_str
  except (ValueError, OverflowError) as e:
    # If conversion fails, return None
    return None

def convert_dump_to_strings(dump_values):
  """
  Converts a tuple of hexadecimal values to a list of readable strings.

  Args:
    dump_values (tuple): The tuple containing hexadecimal values and None.

  Returns:
    list: A list of decoded strings.
  """
  return [hex_to_string(value) for value in dump_values if value is not None]

def main():
  # Convert the dump values to strings
  strings = convert_dump_to_strings(dump)

  # Print the converted strings
  for idx, s in enumerate(strings, start=1):
    print(f"String {idx}: {s}")

if __name__ == "__main__":
  main()

